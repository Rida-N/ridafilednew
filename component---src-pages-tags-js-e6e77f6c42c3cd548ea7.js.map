{"version":3,"sources":["webpack://ridafieldnew/./src/pages/tags.js"],"names":["allTags","useStaticQuery","allContentfulBlog","nodes","totalCount","tagBlogs","forEach","blog","otherInfo","tags","tag","push","title","slug","seo","S","className","alt","src","formats","placeholder","Object","entries","map","tagIndex","tagName","blogs","key","index","blogName","Link","to"],"mappings":"wLAuFA,UAnDa,WACX,IAdMA,EAcN,GACEC,oBA/BgB,cA+BeC,kBADbC,GAApB,EAAQC,WAAR,EAAoBD,OAEdE,GAhBAL,EAAU,GAgBgBG,EAf1BG,SAAQ,SAACC,GACbA,EAAKC,UAAUC,KAAKH,SAAQ,SAACI,GACvBV,EAAQU,GACVV,EAAQU,GAAKC,KAAK,CAACJ,EAAKK,MAAOL,EAAKM,OAEpCb,EAAQU,GAAO,CAAC,CAACH,EAAKK,MAAOL,EAAKM,aAIjCb,GAOP,OACE,gBAAC,IAAD,CAAQc,IAAK,CAAEF,MAAO,SACpB,gBAAC,IAAD,KACE,gBAAC,EAAAG,EAAD,CACEC,UAAU,mBACVC,IAAI,UACJC,IAAI,4BACJC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,YAAY,YALd,sBAOA,uBAAKJ,UAAU,kBACb,sBAAIA,UAAU,aAAd,YACA,uBAAKA,UAAU,QACZK,OAAOC,QAAQjB,GAAUkB,KAAI,SAACb,EAAKc,GAElC,IAAOC,EAAkBf,EAAzB,GAAgBgB,EAAShB,EAAzB,GAEA,OACE,uBAAKM,UAAU,YAAYW,IAAKH,GAC9B,qBAAGR,UAAU,mBACX,gBAAC,MAAD,CAAeA,UAAU,mBACzB,4BAAOS,IAET,uBAAKT,UAAU,kBACZU,EAAMH,KAAI,SAAChB,EAAMqB,GAChB,IAAOC,EAAkBtB,EAAzB,GAAiBM,EAAQN,EAAzB,GACA,OACE,gBAAC,EAAAuB,KAAD,CACEd,UAAU,gBACVe,GAAE,IAAMlB,EACRc,IAAKC,GAEJC","file":"component---src-pages-tags-js-e6e77f6c42c3cd548ea7.js","sourcesContent":["import React from \"react\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport Layout from \"../components/Layout\";\nimport Header from \"../components/Header\";\nimport { AiOutlineTags } from \"react-icons/ai\";\nimport { graphql, useStaticQuery, Link } from \"gatsby\";\n\nconst query_tagBlogs = graphql`\n  {\n    allContentfulBlog {\n      totalCount\n      nodes {\n        otherInfo {\n          tags\n        }\n        title\n        slug\n      }\n    }\n  }\n`;\n\nconst getTagBlogInfo = (blogs) => {\n  const allTags = {};\n  blogs.forEach((blog) => {\n    blog.otherInfo.tags.forEach((tag) => {\n      if (allTags[tag]) {\n        allTags[tag].push([blog.title, blog.slug]);\n      } else {\n        allTags[tag] = [[blog.title, blog.slug]];\n      }\n    });\n  });\n  return allTags;\n};\n\nconst Tags = () => {\n  const { totalCount, nodes } =\n    useStaticQuery(query_tagBlogs).allContentfulBlog;\n  const tagBlogs = getTagBlogInfo(nodes);\n  return (\n    <Layout seo={{ title: \"Tags\" }}>\n      <Header>\n        <StaticImage\n          className=\"header-video-img\"\n          alt=\"flowers\"\n          src=\"../assets/images/temp.jpg\"\n          formats={[\"auto\", \"webp\", \"avif\"]}\n          placeholder=\"tracedSVG\"\n        />\n        <div className=\"tags-container\">\n          <h4 className=\"tags-head\">All Tags</h4>\n          <div className=\"tags\">\n            {Object.entries(tagBlogs).map((tag, tagIndex) => {\n              //TODO tag排序，文章多的排序在前面\n              const [tagName, blogs] = tag;\n              // get images for tag (search blog with certain tag then get the first one)\n              return (\n                <div className=\"tags-item\" key={tagIndex}>\n                  <p className=\"tags-item-title\">\n                    <AiOutlineTags className=\"tags-item_icon\" />\n                    <span>{tagName}</span>\n                  </p>\n                  <div className=\"tags-blog-list\">\n                    {blogs.map((blog, index) => {\n                      const [blogName, slug] = blog;\n                      return (\n                        <Link\n                          className=\"tag-blog-link\"\n                          to={`/${slug}`}\n                          key={index}\n                        >\n                          {blogName}\n                        </Link>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </Header>\n    </Layout>\n  );\n};\n\nexport default Tags;\n"],"sourceRoot":""}